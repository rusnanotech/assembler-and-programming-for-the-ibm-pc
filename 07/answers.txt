7.1
-128 байт назад (80H), +127 байт вперед (операнд 7FH)

7.2
A) 27H, 64DH	62B
B) 6B, 691
V) C6, 5EC		5EA

7.3
EX73.ASM
1.	Сегмент стэка
2.	Сегмент данных
		с 12 байтами (?) для результата/
3.	Сегмент кода
	3.1.	Инициализация стека и сегментных регистров
	3.2.	Вызов подпрограммы LOOP-цикла
				- загрузка адреса данных в регистр BX
				- загрузка количества циклов (12) в CX
				- загрузка X0=0 в AL, X1=1 в BL
				- помещение первого значения из BL в память
				- расчеты и помещение результатов в память
													AL		DL
				метка:								X0=0	X1=1
						X2=X0+X1	ADD AL,DL		X2=1	X1=1
									MOV	[BX],AL		поместить в память 1
									INC BX
						X3=X1+X2	ADD DL,AL		X2=1	X3=2
									MOV [BX],BL		поместить в память 2
									INC BX
									Если счетчик не ноль, идти на метку,
									если счетчик ноль, возврат.
Вариант из ответа:
				AL	BL	DL
				0	1	0
	ADD AL,BL	1	1	0
	MOV BL,DL	1	0	0
	MOV	DL,AL	1	0	1
	MOV	[DI],AL
	INC DI
	
	ADD AL,BL	1	0	1
    MOV BL,DL	1	1	1
	MOV	DL,AL	1	1	1
	MOV	[DI],AL
	INC DI
	
	ADD AL,BL	2	1	1
	MOV BL,DL	2	1	1
	MOV	DL,AL	2	1	2
	MOV	[DI],AL
	INC DI
	
	ADD AL,BL	3	1	2
    MOV BL,DL	3	2	2
	MOV	DL,AL	3	2	3
	MOV	[DI],AL
	INC DI
	
	ADD AL,BL	5	2	3
	MOV BL,DL	5	3	3
	MOV	DL,AL	5	3	5
	MOV	[DI],AL
	INC DI
	
	ADD AL,BL	8	3	5
	MOV BL,DL	8	5	5
	MOV	DL,AL	8	5	8
	MOV	[DI],AL
	INC DI

X2=X1+X0		ADD AL,BL
записать X1		MOV BL,DL	
записать X2		MOV	DL,AL	


7.4
a)	DX > CX, беззнаковые
	CMP DX,CX
	JA/JNBE
б)	BX > AX, знаковые
	JG/JNLE
в)	CX = 0
	JCXZ (Если CX=0, то перенос)
г)	было ли переполнение?
	JO
д)	BX <= AX, знаковые
	JLE/JNG
е)	DX <= CX, беззнаковые
	JBE/JNA

7.5
a)	OF
б)	SF
в)	ZF
г)	TF
д)	DF

7.6
EX76.ASM
				SP:	36	38	3A	3C	3E	Следующая команда
					------------------	-------------------
					00	00	00	00<	DS
	CALL	B10		00	00	B10<00	DS	B10 CALL C10
B10	CALL	C10		00	B90<B10	00	DS	B90	RET

C10	RET				00	00	B10<00	DS
B90	RET				00	00	00	00<	DS

B10	CALL	C10		00	00	B90<00	DS

C10	RET				00	00	00	00<	DS
B90	RET				00	00	00	00	DS<
00	команда по смещению 0000
...
	CALL B10
И так далее бесконечные циклы

7.7
FAR - дальняя адресация (например, межсегментный вызов процедуры), NEAR - ближняя адресация (внутрисегментная)

7.8
CALL МЕТКА

7.9
три адреса, если считать A10 главной процедурой

7.10
BL					1 1 1 0  0 0 1 1
BOONO				0 1 1 1  1 0 0 1
			                 
a)	XOR BL,BOONO	1 0 0 1  1 0 1 0
b)	AND	BL,BOONO	0 1 1 0  0 0 0 1
v)	OR	BL,BOONO	1 1	1 1  1 0 1 1
g)	XOR	BL,1111111B	0 0 0 1  1 1 0 0
d)	AND	BL,0000000B	0 0 0 0  0 0 0 0		

7.11
EX711.ASM

7.12
DX				1011 1001 1011 1001
CL				03H
			                 
a)	SHR	DX,1	0101 1100 1101 1100
b)	SHR	DX,CL	0001 0111 0011 0111
v)	SHL	DX,CL	1100 1101 1100 1000
g)	SHL	DL,1	1011 1001 0111 0010
d)	ROR	DX,CL	0011 0111 0011 0111
e)	ROR DL,CL	1011 1001 0011 0111
z)	SAL	DH,1	0111 0010 1011 1001

7.13
EX13.ASM

Подготовка
	Загрузить X в регистр AX
Проверка AX на знак
	Если +, то очистить регистра BX и приступить к Расчету
	Если -, то занести FFFFH в регистр BX

Расчет:	Умножение на 2
		--------------------------
		сдвиг AX влево
		записать AX в DX

		Умножение на 4
		--------------------------
		сдвиг AX влево с переносом
		сдвиг BX влево с переносом
		сдвиг AX влево с переносом
		сдвиг BX влево с переносом

		Прибавление удвоенного числа
		--------------------------
		проверить BX на знак (TEST BX,8000H)
		
		если + (BX полож)
		прибавить CX к AX
		если есть перенос, увеличить BX на 1
		прибавить DX к BX
		
		если - (BX отриц)
		прибавить CX к AX
		если нет переноса, уменьшить BX на 1
		прибавить DX к BX
		
		выход

7.14
Пример
	SHL		AX,1
	RCL		DX,1

a)		SHL		AX,1	;умножение на 4
		RCL		DX,1
		SHL		AX,1
		RCL		DX,1
б)		SAR		DX,1	;деление на 4
		RCR		AX,1
		RCR		BX,1		;дробная часть
		SAR		DX,1
		RCR		AX,1
        RCR		BX,1


















